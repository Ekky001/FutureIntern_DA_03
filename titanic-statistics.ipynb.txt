{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:46:37.211962Z","iopub.execute_input":"2024-12-14T13:46:37.212450Z","iopub.status.idle":"2024-12-14T13:46:38.743550Z","shell.execute_reply.started":"2024-12-14T13:46:37.212413Z","shell.execute_reply":"2024-12-14T13:46:38.742356Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Import Libraries**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom scipy import stats","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:46:48.032755Z","iopub.execute_input":"2024-12-14T13:46:48.033156Z","iopub.status.idle":"2024-12-14T13:46:48.467172Z","shell.execute_reply.started":"2024-12-14T13:46:48.033120Z","shell.execute_reply":"2024-12-14T13:46:48.466256Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Load Dataset**","metadata":{}},{"cell_type":"code","source":"# Load the dataset\ndf = pd.read_csv('/kaggle/input/titanic/train.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:46:56.733045Z","iopub.execute_input":"2024-12-14T13:46:56.733593Z","iopub.status.idle":"2024-12-14T13:46:56.756881Z","shell.execute_reply.started":"2024-12-14T13:46:56.733557Z","shell.execute_reply":"2024-12-14T13:46:56.755891Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load the dataset\ndf = pd.read_csv('/kaggle/input/titanic/test.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:47:03.927126Z","iopub.execute_input":"2024-12-14T13:47:03.927515Z","iopub.status.idle":"2024-12-14T13:47:03.943346Z","shell.execute_reply.started":"2024-12-14T13:47:03.927481Z","shell.execute_reply":"2024-12-14T13:47:03.942102Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Checking for missing values**","metadata":{}},{"cell_type":"code","source":"# Check for missing values\nmissing_values = df.isnull().sum()\nprint(\"Missing values per column:\")\nprint(missing_values)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:47:12.942368Z","iopub.execute_input":"2024-12-14T13:47:12.942785Z","iopub.status.idle":"2024-12-14T13:47:12.953417Z","shell.execute_reply.started":"2024-12-14T13:47:12.942748Z","shell.execute_reply":"2024-12-14T13:47:12.952249Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Drop rows with any missing values\ndf = df.dropna()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:47:22.474174Z","iopub.execute_input":"2024-12-14T13:47:22.474593Z","iopub.status.idle":"2024-12-14T13:47:22.487109Z","shell.execute_reply.started":"2024-12-14T13:47:22.474556Z","shell.execute_reply":"2024-12-14T13:47:22.485960Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Impute Age with median\ndf['Age'] = df['Age'].fillna(df['Age'].median())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:47:30.187300Z","iopub.execute_input":"2024-12-14T13:47:30.187691Z","iopub.status.idle":"2024-12-14T13:47:30.201557Z","shell.execute_reply.started":"2024-12-14T13:47:30.187658Z","shell.execute_reply":"2024-12-14T13:47:30.200562Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Impute Embarked with mode\ndf['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:47:37.807049Z","iopub.execute_input":"2024-12-14T13:47:37.807448Z","iopub.status.idle":"2024-12-14T13:47:37.817898Z","shell.execute_reply.started":"2024-12-14T13:47:37.807397Z","shell.execute_reply":"2024-12-14T13:47:37.816608Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Check if there are still missing values\nprint(\"Remaining missing values per column:\")\nprint(df.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:47:44.077859Z","iopub.execute_input":"2024-12-14T13:47:44.078946Z","iopub.status.idle":"2024-12-14T13:47:44.085684Z","shell.execute_reply.started":"2024-12-14T13:47:44.078905Z","shell.execute_reply":"2024-12-14T13:47:44.084391Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Statistical Functionality**","metadata":{}},{"cell_type":"code","source":"# Function to calculate and print mean\ndef calculate_mean(column):\n    mean = np.mean(column)\n    print(f\"Mean: {mean:.2f}\")\n    return mean","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:49:12.708572Z","iopub.execute_input":"2024-12-14T13:49:12.708946Z","iopub.status.idle":"2024-12-14T13:49:12.714777Z","shell.execute_reply.started":"2024-12-14T13:49:12.708915Z","shell.execute_reply":"2024-12-14T13:49:12.713474Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Function to calculate and print median\ndef calculate_median(column):\n    median = np.median(column)\n    print(f\"Median: {median:.2f}\")\n    return median","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:50:04.089453Z","iopub.execute_input":"2024-12-14T13:50:04.089828Z","iopub.status.idle":"2024-12-14T13:50:04.095093Z","shell.execute_reply.started":"2024-12-14T13:50:04.089797Z","shell.execute_reply":"2024-12-14T13:50:04.093964Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def calculate_mode(column):\n    mode = stats.mode(column, nan_policy='omit').mode[0]\n    print(f\"Mode: {mode:.2f}\")\n    return mode","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:56:48.914177Z","iopub.execute_input":"2024-12-14T13:56:48.914711Z","iopub.status.idle":"2024-12-14T13:56:48.920491Z","shell.execute_reply.started":"2024-12-14T13:56:48.914557Z","shell.execute_reply":"2024-12-14T13:56:48.919272Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Function to calculate and print standard deviation\ndef calculate_std_dev(column):\n    std_dev = np.std(column, ddof=1)\n    print(f\"Standard Deviation: {std_dev:.2f}\")\n    return std_dev","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:51:27.548102Z","iopub.execute_input":"2024-12-14T13:51:27.549175Z","iopub.status.idle":"2024-12-14T13:51:27.553985Z","shell.execute_reply.started":"2024-12-14T13:51:27.549127Z","shell.execute_reply":"2024-12-14T13:51:27.552903Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Select a specific column to calculate statistics (e.g., 'Age')\ncolumn = df['Age']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:52:15.378658Z","iopub.execute_input":"2024-12-14T13:52:15.379064Z","iopub.status.idle":"2024-12-14T13:52:15.384472Z","shell.execute_reply.started":"2024-12-14T13:52:15.379005Z","shell.execute_reply":"2024-12-14T13:52:15.382896Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Calculate separately\nprint(\"Statistics for 'Age':\")\nmean = calculate_mean(column)\nmedian = calculate_median(column)\nmode = calculate_mode(column)\nstd_dev = calculate_std_dev(column)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:56:58.693250Z","iopub.execute_input":"2024-12-14T13:56:58.693660Z","iopub.status.idle":"2024-12-14T13:56:58.733766Z","shell.execute_reply.started":"2024-12-14T13:56:58.693624Z","shell.execute_reply":"2024-12-14T13:56:58.732494Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Optionally, repeat for all numeric columns\nprint(\"\\nStatistics for all numeric columns:\")\nnumerical_columns = df.select_dtypes(include=[np.number]).columns\nfor col in numerical_columns:\n    print(f\"\\nStatistics for '{col}':\")\n    calculate_mean(df[col].dropna())\n    calculate_median(df[col].dropna())\n    calculate_mode(df[col].dropna())\n    calculate_std_dev(df[col].dropna())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-14T13:57:05.092735Z","iopub.execute_input":"2024-12-14T13:57:05.093148Z","iopub.status.idle":"2024-12-14T13:57:05.137560Z","shell.execute_reply.started":"2024-12-14T13:57:05.093112Z","shell.execute_reply":"2024-12-14T13:57:05.135866Z"}},"outputs":[],"execution_count":null}]}